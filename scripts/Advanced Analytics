-- ============================================================================
-- Advanced Analytics
-- ============================================================================

-- Monthly sales trends
SELECT YEAR(order_date) AS year, MONTH(order_date) AS month,
       SUM(sales_amount) AS total_sales,
       COUNT(DISTINCT customer_key) AS total_customers,
       SUM(quantity) AS total_quantity
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY YEAR(order_date), MONTH(order_date)
ORDER BY year, month;

-- Cumulative sales and moving average price
SELECT order_date, total_sales,
       SUM(total_sales) OVER (ORDER BY order_date) AS running_total_sales,
       AVG(avg_price) OVER (ORDER BY order_date) AS moving_avg_price
FROM (
    SELECT DATETRUNC(year, order_date) AS order_date,
           SUM(sales_amount) AS total_sales,
           AVG(price) AS avg_price
    FROM gold.fact_sales
    WHERE order_date IS NOT NULL
    GROUP BY DATETRUNC(year, order_date)
) t;

-- Year-over-Year product performance
WITH yearly_sales AS (
    SELECT YEAR(f.order_date) AS order_year, p.product_name,
           SUM(f.sales_amount) AS current_sales
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p ON f.product_key = p.product_key
    WHERE f.order_date IS NOT NULL
    GROUP BY YEAR(f.order_date), p.product_name
)
SELECT order_year, product_name, current_sales,
       AVG(current_sales) OVER (PARTITION BY product_name) AS avg_sales,
       current_sales - AVG(current_sales) OVER (PARTITION BY product_name) AS diff_avg,
       LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS prev_year_sales,
       current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS yoy_diff
FROM yearly_sales
ORDER BY product_name, order_year;

-- Customer segmentation
WITH customer_spending AS (
    SELECT c.customer_key,
           SUM(f.sales_amount) AS total_spending,
           DATEDIFF(month, MIN(order_date), MAX(order_date)) AS lifespan
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_customers c ON f.customer_key = c.customer_key
    GROUP BY c.customer_key
)
SELECT CASE 
           WHEN lifespan >= 12 AND total_spending > 5000 THEN 'VIP'
           WHEN lifespan >= 12 THEN 'Regular'
           ELSE 'New'
       END AS customer_segment,
       COUNT(customer_key) AS total_customers
FROM customer_spending
GROUP BY CASE 
             WHEN lifespan >= 12 AND total_spending > 5000 THEN 'VIP'
             WHEN lifespan >= 12 THEN 'Regular'
             ELSE 'New'
         END
ORDER BY total_customers DESC;

-- Product segmentation by sales
WITH product_sales AS (
    SELECT product_key, product_name, SUM(sales_amount) AS total_sales
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
    GROUP BY product_key, product_name
)
SELECT product_name,
       CASE WHEN total_sales > 50000 THEN 'High-Performer'
            WHEN total_sales >= 10000 THEN 'Mid-Range'
            ELSE 'Low-Performer' END AS product_segment,
       total_sales
FROM product_sales
ORDER BY total_sales DESC;

-- Part-to-whole analysis (category contribution)
WITH category_sales AS (
    SELECT p.category, SUM(f.sales_amount) AS total_sales
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
    GROUP BY p.category
)
SELECT category, total_sales,
       SUM(total_sales) OVER () AS overall_sales,
       ROUND((CAST(total_sales AS FLOAT) / SUM(total_sales) OVER ()) * 100, 2) AS percent_of_total
FROM category_sales
ORDER BY total_sales DESC;
